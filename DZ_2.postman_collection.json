{
	"info": {
		"_postman_id": "1a7d2aab-e746-479a-80d6-cc32c2c43a2c",
		"name": "DZ_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28312900"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200 \r",
							"// Тест прописан р родительской коллекции, вызывается автоматически\r",
							"\r",
							"var resp_body = pm.response.text();\r",
							"console.log(\"rgf == \" + resp_body, typeof resp_body)\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string\r",
							"pm.test(\"Check_string\", function () {\r",
							"    pm.expect(resp_body).to.eql(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5006/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5006",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200 \r",
							"// Тест прописан в родительской коллекции, вызывается автоматически\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							" var resp_body = pm.response.json();\r",
							"\r",
							"var resp_name = resp_body.name;\r",
							"console.log (\"resp_name == \" + resp_name, typeof resp_name)\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(resp_name).to.eql(\"Kate\");\r",
							"});\r",
							"\r",
							"var resp_age = +resp_body.age;\r",
							"console.log (\"resp_age == \" + resp_age, typeof resp_age)\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(resp_age).to.eql(33);\r",
							"});\r",
							"\r",
							"var resp_salary = resp_body.salary;\r",
							"console.log (\"resp_salary == \" + resp_salary, typeof resp_salary)\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(500);\r",
							"});\r",
							"\r",
							"//  7. Спарсить request.\r",
							"var req_body = request.data\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var req_name = req_body.name\r",
							"console.log (\"req_name == \" + req_name, typeof req_name)\r",
							"pm.test(\"Check name_2\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"var req_age = +req_body.age\r",
							"console.log (\"req_age == \" + req_age, typeof req_age)\r",
							"pm.test(\"Check age_2\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var req_salary = +req_body.salary\r",
							"console.log (\"req_salary == \" + req_salary, typeof req_salary)\r",
							"pm.test(\"Check salary_2\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(pm.response.json().family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"var resp_salary_1_5 = resp_body.family.u_salary_1_5_year;\r",
							"var req_salary_1_5 = +req_body.salary * 4\r",
							"console.log (\"resp_salary_1_5 == \" + resp_salary_1_5, typeof resp_salary_1_5)\r",
							"console.log (\"req_salary_1_5 == \" + req_salary_1_5, typeof req_salary_1_5)\r",
							"pm.test(\"Check u_salary_1_5_year\", function () {\r",
							"    pm.expect(resp_salary_1_5).to.eql(req_salary_1_5);\r",
							"});\r",
							"console.log(pm.response.json().family)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kate",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5006/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5006",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200 \r",
							"// Тест прописан в родительской коллекции, вызывается автоматически\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							" var resp_body = pm.response.json();\r",
							"\r",
							"//  4. Спарсить request.\r",
							" var req_url = pm.request.url.query.toObject();\r",
							"\r",
							"//  5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var resp_name = resp_body.name;\r",
							"console.log (\"resp_name == \" + resp_name, typeof resp_name)\r",
							"var req_name = req_url.name\r",
							"console.log (\"req_name == \" + req_name, typeof req_name)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"var resp_age = resp_body.age;\r",
							"console.log (\"resp_age == \" + resp_age, typeof resp_age)\r",
							"var req_age = req_url.age\r",
							"console.log (\"req_age == \" + req_age, typeof req_age)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var resp_salary = resp_body.salary;\r",
							"console.log (\"resp_salary == \" + resp_salary, typeof resp_salary)\r",
							"var req_salary = +req_url.salary\r",
							"console.log (\"req_salary == \" + req_salary, typeof req_salary)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(pm.response.json().family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"var res_pets = resp_body.family.pets.dog\r",
							"pm.test(\"Dog has name\", function () {\r",
							"pm.expect(res_pets).to.haveOwnProperty(\"name\")\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age\r",
							"var res_pets = resp_body.family.pets.dog\r",
							"pm.test(\"Dog has age\", function () {\r",
							"pm.expect(res_pets).to.haveOwnProperty(\"age\")\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"var res_dog = resp_body.family.pets.dog.name\r",
							"console.log (\"res_dog == \" + res_dog, typeof res_dog)\r",
							"pm.test(\"Dog Luky\", function () {\r",
							"    pm.expect(res_dog).to.eql(\"Luky\")\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4\r",
							"var dog_age = resp_body.family.pets.dog.age\r",
							"console.log (\"dog_age== \" + dog_age, typeof dog_age)\r",
							"pm.test(\"Dog age_4\", function () {\r",
							"    pm.expect(dog_age).to.eql(4)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5006/object_info_3?name=Kate&age=33&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5006",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Kate"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200 \r",
							"// Тест прописан в родительской коллекции, вызывается автоматически\r",
							"\r",
							"// 3. Спарсить response body в json\r",
							" var resp_body = pm.response.json();\r",
							"\r",
							" //  4. Спарсить request.\r",
							" var req_url = pm.request.url.query.toObject();\r",
							"\r",
							"//  5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var resp_name = resp_body.name;\r",
							"console.log (\"resp_name == \" + resp_name, typeof resp_name)\r",
							"var req_name = req_url.name\r",
							"console.log (\"req_name == \" + req_name, typeof req_name)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"var resp_age = resp_body.age;\r",
							"console.log (\"resp_age == \" + resp_age, typeof resp_age)\r",
							"var req_age = +req_url.age\r",
							"console.log (\"req_age == \" + req_age, typeof req_age)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request\r",
							"console.log(\"req_salary == \" + req_url.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"resp_salary == \" + resp_body.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"resp_salary == \" + resp_body.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"resp_salary == \" + resp_body.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"resp_salary == \" + resp_body.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"var res_salary_0 = resp_body.salary[0];\r",
							"console.log(\"res_salary_0 == \" + res_salary_0, typeof res_salary_0)\r",
							"var req_salary = +req_url.salary\r",
							"console.log(\"req_salary == \" + req_salary, typeof req_salary)\r",
							"\r",
							"pm.test(\"Check salary [0]\", function () {\r",
							"    pm.expect(res_salary_0).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"var res_salary_1 = +resp_body.salary[1];\r",
							"console.log(\"res_salary_1 == \" +  res_salary_1, typeof res_salary_1)\r",
							"var req_salary = req_url.salary * 2\r",
							"console.log(\"req_salary == \" + req_salary, typeof req_salary)\r",
							"\r",
							"pm.test(\"Check salary [1]\", function () {\r",
							"    pm.expect(res_salary_1).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"var res_salary_2 = +resp_body.salary[2];\r",
							"console.log(\"res_salary_2 == \" +  res_salary_2, typeof res_salary_2)\r",
							"var req_salary = req_url.salary * 3\r",
							"console.log(\"req_salary == \" + req_salary, typeof req_salary)\r",
							"\r",
							"pm.test(\"Check salary [2]\", function () {\r",
							"    pm.expect(res_salary_2).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name \r",
							"pm.environment.set('name');\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set('age');\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set('salary');\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set('name', resp_body.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set('age', resp_body.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set('salary', resp_body.salary[0]);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"for (i = 0; i < resp_body.salary.length; i++) {\r",
							"\r",
							"    console.log(\"salary[\" +i +\"] ==\" +resp_body.salary[i]);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5006/object_info_4?name=Kate&age=33&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5006",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Kate"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200 \r",
							"// Тест прописан в родительской коллекции, вызывается автоматически\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"var resp_body = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var req_body = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Have start_salary\", function () {\r",
							"pm.expect(resp_body).to.haveOwnProperty(\"start_qa_salary\")\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Have start_salary_6_months\", function () {\r",
							"pm.expect(resp_body).to.haveOwnProperty(\"qa_salary_after_6_months\")\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Have salary_12_months\", function () {\r",
							"pm.expect(resp_body).to.haveOwnProperty(\"qa_salary_after_12_months\")\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Have salary_1.5_year\", function () {\r",
							"pm.expect(resp_body).to.haveOwnProperty(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Have salary_3.5_years\", function () {\r",
							"pm.expect(resp_body).to.haveOwnProperty(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Have person\", function () {\r",
							"pm.expect(resp_body).to.haveOwnProperty(\"person\")\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"var resp_start_salary = resp_body.start_qa_salary;\r",
							"console.log(\"resp_start_salary == \" + resp_start_salary, typeof resp_start_salary)\r",
							"var req_start_salary = +req_body.salary\r",
							"console.log(\"req_start_salary == \" + req_start_salary, typeof req_start_salary)\r",
							"\r",
							"pm.test(\"Check start_salary\", function () {\r",
							"    pm.expect(resp_start_salary).to.eql(req_start_salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"var resp_salary_6 = resp_body.qa_salary_after_6_months;\r",
							"console.log(\"resp_salary_6 == \" + resp_salary_6, typeof resp_salary_6)\r",
							"var req_salary_6 = +req_body.salary*2\r",
							"console.log(\"req_salary_6 == \" + req_salary_6, typeof req_salary_6)\r",
							"\r",
							"pm.test(\"Check salary_after_6_months\", function () {\r",
							"    pm.expect(resp_salary_6).to.eql(req_salary_6);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"var resp_salary_12 = resp_body.qa_salary_after_12_months;\r",
							"console.log(\"resp_salary_12 == \" + resp_salary_12, typeof resp_salary_12)\r",
							"var req_salary_12 = +req_body.salary*2.7\r",
							"console.log(\"req_salary_12 == \" + req_salary_12, typeof req_salary_12)\r",
							"\r",
							"pm.test(\"Check salary_after_12_months\", function () {\r",
							"    pm.expect(resp_salary_12).to.eql(req_salary_12);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"var resp_salary_1_5_year = resp_body['qa_salary_after_1.5_year'];\r",
							"console.log(\"resp_salary_1_5_year == \" + resp_salary_1_5_year, typeof resp_salary_1_5_year)\r",
							"var req_salary_1_5_year = +req_body.salary*3.3\r",
							"console.log(\"req_salary_1_5_year == \" + req_salary_1_5_year, typeof req_salary_1_5_year)\r",
							"\r",
							"pm.test(\"Check salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp_salary_1_5_year).to.eql(req_salary_1_5_year);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"var resp_salary_3_5_years = resp_body['qa_salary_after_3.5_years'];\r",
							"console.log(\"resp_salary_3_5_years == \" + resp_salary_3_5_years, typeof resp_salary_3_5_years)\r",
							"var req_salary_3_5_years = +req_body.salary*3.8\r",
							"console.log(\"req_salary_3_5_years == \" + req_salary_3_5_years, typeof req_salary_3_5_years)\r",
							"\r",
							"pm.test(\"Check salary_after_3.5_year\", function () {\r",
							"    pm.expect(resp_salary_3_5_years).to.eql(req_salary_3_5_years);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"var resp_u_name = resp_body.person.u_name[1];\r",
							"console.log(\"resp_u_name == \" + resp_u_name, typeof resp_u_name)\r",
							"var req_start_salary = +req_body.salary\r",
							"console.log(\"req_start_salary == \" + req_start_salary, typeof req_start_salary)\r",
							"\r",
							"pm.test(\"Check salary u_name\", function () {\r",
							"    pm.expect(resp_u_name).to.eql(req_start_salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"var resp_u_age = resp_body.person.u_age;\r",
							"console.log(\"resp_u_age == \" + resp_u_age, typeof resp_u_age)\r",
							"var req_age = +req_body.age\r",
							"console.log(\" req_age == \" +  req_age, typeof  req_age)\r",
							"\r",
							"pm.test(\"Check u_age\", function () {\r",
							"    pm.expect(resp_u_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"var resp_salary_5_years = resp_body.person.u_salary_5_years;\r",
							"console.log(\"resp_salary_5_years == \" + resp_salary_5_years, typeof resp_salary_5_years)\r",
							"var req_salary_5_years = +req_body.salary*4.2\r",
							"console.log(\"req_salary_5_years == \" + req_salary_5_years, typeof req_salary_5_years)\r",
							"\r",
							"pm.test(\"Check salary_5_year\", function () {\r",
							"    pm.expect(resp_salary_5_years).to.eql(req_salary_5_years);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"var  person = resp_body.person;\r",
							"for (let new_item in person){\r",
							"    console.log(new_item +\" = \" + person[new_item])\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5006/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5006",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}